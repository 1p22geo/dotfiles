#!/usr/bin/python
import os

# the last one is for W*ndows users used to Powershell
if len(os.sys.argv) == 1 or os.sys.argv[1] in ["-h", "--help", "help", "/?"]:
    print("""
----------------------------

this is a very messy script to build
the default linux kernel with a specific config

basically go get some config file
(doesn't matter where it is, your working directory doesn't matter too)

if you don't have one you can

cat /proc/config.gz | zcat > .config

to get the config of the running kernel.


just give the script the path to this config
and it will ask a couple questions, clone Linux for you and compile it.



Usage:

    $ kmake /path/to/.config

Environment variables:

LINUX_SOURCE_DIR: the directory containing the Linux source.
If nonexistent, will be `mkdir` and `git clone` 'd
----------------------------
          """)
    os._exit(0)


def cmd(q):
    print("Executing:")
    print("```")
    print(q)
    print("```")
    os.system(q)


conf = os.sys.argv[1]
try:
    open(conf).close()
except Exception:
    print(f"Failed opening config file: `{conf}`")
    print("Try `kmake -h`")
    os._exit(1)
linux = os.getenv("LINUX_SOURCE_DIR", "~/Documents/linux")
try:
    open(os.path.join(linux, "Makefile")).close()
except Exception:
    print("Failed opening ", os.path.join(linux, "Makefile"))
    print("Cloning Linux to ", os.path.join(linux))
    accept = input("Clone linux now? [y/n]").lower().startswith("y")
    if not accept:
        os._exit(2)
    cmd(f"git clone --depth 1 https://github.com/torvalds/linux {linux}")

print("Sources and config ready.")

cmd(f"cp {conf} {linux}/.config")
cmd(f"make -C {linux} oldconfig")
cmd(f"make -C {linux} -j32")
cmd(f"cp {linux}/arch/x86_64/boot/bzImage ./vmlinuz")
