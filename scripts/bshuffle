#!/usr/bin/python3

# you can change this to change the listening port
# note that bshuffle cannot do a clean shutdown yet bc i don't know python sockets well enough, so this port will still be taken after the script stops
# if you can help, pls send a pull request.
# if bShuffle cannot bind to this port, it will try the one right after, and so on
# max_tries controls how many times can it increment the port before stopping
port = 6002
max_tries = 10

import os
import subprocess
import signal
import random
import socket
import threading
os.chdir(os.getenv("HOME")+"/Music")

pid = 0
search = ""
play = ""
pause = False
filelist = []

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print_lock = threading.Lock()


# thread function
def threaded(c):
    global search
    global pid
    global play
    global pause
    global s
    c.send(b"You are connected to the bShuffle music server, now playing "+play.encode("utf-8")+b"\nbsh> ")
    while True:

        # data received from client
        data = c.recv(1024)
        if not data:
            print_lock.release()
            break
        ret = ""
        try:
            cmd = data.decode('utf-8').strip().split(" ")
            ret += "Command acknowledged, "+ str(cmd)+ "\n"
            if cmd[0] == "help":
                ret += ("""
                    bShuffle 0.1 server
                    
                    Allowed commands:
                        help - print this help
                        skip - skip a song
                        get - print a value:
                            get playing - what is playing now
                            get pause - is the player paused now
                            get pid - the PID of the mPlayer process
                            get search - the search pattern
                            get files - all music files indexed by bShuffle
                        search - set the search pattern
                            bShuffle will only play songs matching this pattern now
                            it's not a regular expression, it's very simple
                            search asdf
                                - bShuffle will only play songs with asdf in their name
                                  search is case insensitive
                        pause - toggle pause
                            pause on - set pause
                            pause off - unpause
                            pause (without arguments) - toggle pause
                        exit - exit bShuffle prompt
                        stop - stop bShuffle server
                            note that bShuffle will no longer be accepting connections and you will need to restart it
                """)
            if cmd[0] == "skip":
                if pid:
                    os.kill(pid, signal.SIGTERM)
                pid = 0
                ret += "skipping playback"
            if cmd[0] == "search":
                search = " ".join(cmd[1:]).strip()
                ret += "changing search string to: "+search
            if cmd[0] == "get":
                if cmd[1] == "search":
                    ret += "search: \""+search+"\""
                if cmd[1] == "pid":
                    ret += "pid: "+str(pid)
                if cmd[1] == "files":
                    ret += "Files: \n"+"\n\t".join(filelist)
                if cmd[1] == "playing":
                    ret += "playing: \""+play+"\""
                if cmd[1] == "pause":
                    if pause:
                        ret += "paused"
                    else:
                        ret += "unpaused"
            if cmd[0] == "pause":
                if len(cmd) == 1:
                    pause = not pause
                    ret += "Toggling pause, now "
                    if pause:
                        if pid:
                            os.kill(pid, signal.SIGTERM)
                        pid = 0
                        ret += "paused"
                    else:
                        ret += "unpaused"
                else:
                    if cmd[1] == "on":
                        if pid:
                            os.kill(pid, signal.SIGTERM)
                        pid = 0
                        pause = True
                        ret += "Pausing"
                    if cmd[1] == "off":
                        pause = False
                        ret += "Unpausing"
                    else:
                        ret += "Don't know what this means."
            if cmd[0] == "exit":
                c.send(b"Understandable, have a nice day.\n")
                print_lock.release()
                break
            if cmd[0] == "stop":
                c.send(b"shutting down bShuffle...\n")
                if pid:
                    os.kill(pid, signal.SIGTERM)
                    pid = 0
                s.close()
                print_lock.release()
                os._exit(0)
                

        except Exception as e:
            ret += str(e)
        ret += "\nbsh> "
        c.send(ret.encode("utf-8"))

    # connection closed
    c.close()


def s_thread():
    global s
    global port
    host = "0.0.0.0"

    while True:
        try:
            s.bind((host, port))
            print(f"listening on {host}:{port}")
            break
        except:
            nport = port +1
            print(f"port {port} is taken, using {nport} instead")
            port = port +1

    # put the socket into listening mode
    s.listen(5)
    print("socket is listening")

    # a forever loop until client wants to exit
    while True:

        # establish connection with client
        c, addr = s.accept()

        # lock acquired by client
        print_lock.acquire()
        print('Connection from :', addr[0], ':', addr[1])

        # Start a new thread and return its identifier
        threading.Thread(target=threaded, args=(c,)).start()
    s.close()

threading.Thread(target=s_thread).start()

print("Indexing files...")
for root,_,files in os.walk("."):
    for file in files:
        pt = os.path.join(root, file)
        if pt in filelist:
            continue
        filelist.append(pt)
print("Files indexed.")



while True:
    if pause:
        continue
    filtered = list(filter((lambda x:(search in x.lower())),  filelist))
    file = random.choice(filtered)
    play = file
    proc = subprocess.Popen(["/usr/bin/mplayer", file], stdout=open("/dev/null", "w+"))
    pid = proc.pid
    proc.wait()
