#!/usr/bin/python3

# you can change this to change the listening port
# note that bshuffle cannot do a clean shutdown yet
# bc i don't know python sockets well enough,
# so this port will still be taken after the script stops.
#
# if you can help, pls send a pull request.
# if bShuffle cannot bind to this port,
# it will try the one right after, and so on
# max_tries controls how many times can it increment the port before stopping
import os
import subprocess
import signal
import random
import socket
import threading
import re
os.chdir(os.getenv("HOME")+"/Music")


PORT = 6002
max_tries = 10

pid = 0
search = ""
play = ""
pause = False
pause_lock = threading.Lock()
filelist = []

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)


def match(x):
    if search.startswith('/') and search.endswith('/'):
        return re.search(search[1:-1], x, re.IGNORECASE)
    return re.search(search, x, re.IGNORECASE)

def threaded(c):
    global search
    global pid
    global play
    global pause
    global s
    c.send(b"You are connected to the bShuffle music server, now playing " +
           play.encode("utf-8")+b"\nbsh> ")
    while True:

        # data received from client
        data = c.recv(1024)
        if not data:
            break
        ret = ""
        try:
            cmd = data.decode('utf-8').strip().split(" ")
            ret += "Command acknowledged, " + str(cmd) + "\n"
            if cmd[0] == "help":
                ret += ("""
        bShuffle 0.2 server
        If you are reading this, the music server was installed correctly (TM)

        Allowed commands:
            help - print this help
            skip - skip a song
            get - print a value:
                get playing - what is playing now
                get pause - is the player paused now
                get pid - the PID of the mPlayer process
                get search - the search pattern
                get files - all music files indexed by bShuffle
                get matching - all files matching search
            search - set the search pattern
                bShuffle will only play songs matching this pattern
                it's a case-insensitive regular expression,
                    you can add a slash at the begining and end,
                    they will be ignored.
                search asdf
                    - bShuffle will only play songs with asdf
                            in their name
                    - search is case insensitive
            pause - toggle pause
                pause on - set pause
                pause off - unpause
                pause (without arguments) - toggle pause
            exit - exit bShuffle prompt
            stop - stop bShuffle server
                note that bShuffle will no longer be accepting
                    connections and you will need to restart it
    """)
            elif cmd[0] == "skip" or cmd[0] == '':
                if pid:
                    os.kill(pid, signal.SIGTERM)
                pid = 0
                ret += "skipping playback"
            elif cmd[0] == "search":
                search = " ".join(cmd[1:]).strip()
                ret += "changing search string to: "+search
            elif cmd[0] == "get":
                if cmd[1] == "search":
                    ret += "search: \""+search+"\""
                if cmd[1] == "pid":
                    ret += "pid: "+str(pid)
                if cmd[1] == "files":
                    ret += "Files: \n\t"+"\n\t".join(filelist)
                if cmd[1] == "matching":
                    filtered = list(filter(match,  filelist))
                    ret += f"Files matching search: \"{search}\": \n\t" +\
                        "\n\t".join(filtered)
                if cmd[1] == "playing":
                    ret += "playing: \""+play+"\""
                if cmd[1] == "pause":
                    if pause:
                        ret += "paused"
                    else:
                        ret += "unpaused"
            elif cmd[0] == "pause":
                if len(cmd) == 1:
                    pause = not pause
                    ret += "Toggling pause, now "
                    if pause:
                        if pid:
                            os.kill(pid, signal.SIGTERM)
                            pause_lock.acquire()
                        pid = 0
                        ret += "paused"
                    else:
                        ret += "unpaused"
                        try:
                            pause_lock.release()
                        except:
                            ret += "\nAn error happened. Continuing..."
                else:
                    if cmd[1] == "on":
                        if pid:
                            os.kill(pid, signal.SIGTERM)
                            pause_lock.acquire()
                        pid = 0
                        pause = True
                        ret += "Pausing"
                    elif cmd[1] == "off":
                        pause = False
                        ret += "Unpausing"
                        try:
                            pause_lock.release()
                        except:
                            ret += "\nThe music is already paused"
                    else:
                        ret += "Don't know what this means."
            elif cmd[0] == "exit":
                c.send(b"Understandable, have a nice day.\n")
                break
            elif cmd[0] == "stop":
                c.send(b"shutting down bShuffle...\n")
                if pid:
                    os.kill(pid, signal.SIGTERM)
                    pid = 0
                s.close()
                os._exit(0)
        except Exception as e:
            ret += str(e)
        ret += "\nbsh> "
        c.send(ret.encode("utf-8"))

    # connection closed
    c.close()


def s_thread():
    global s
    host = "0.0.0.0"
    port = PORT
    while True:
        try:
            s.bind((host, port))
            print(f"listening on {host}:{port}")
            break
        except socket.error:
            new_port = port + 1
            if new_port > PORT+max_tries:
                print("FATAL: max retries exceeded, quitting")
                os._exit(-1)
            print(f"port {port} is taken, using {new_port} instead")
            port = port + 1

    # put the socket into listening mode
    s.listen(5)
    print("socket is listening")

    # a forever loop until client wants to exit
    while True:

        # establish connection with client
        c, addr = s.accept()

        print('Connection from :', addr[0], ':', addr[1])

        # Start a new thread and return its identifier
        threading.Thread(target=threaded, args=(c,)).start()
    s.close()


threading.Thread(target=s_thread).start()

print("Indexing files...")
for root, _, files in os.walk("."):
    for file in files:
        pt = os.path.join(root, file)
        if pt in filelist:
            continue
        filelist.append(pt)
print("Files indexed.")


while True:
    if pause:
        pause_lock.acquire()
        pause_lock.release()
    filtered = list(filter(match,  filelist))
    try:
        file = random.choice(filtered)
    except IndexError:
        pass
    play = file
    proc = subprocess.Popen(["/usr/bin/mplayer", file],
                            stdout=open("/dev/null", "w+"))
    pid = proc.pid
    proc.wait()
